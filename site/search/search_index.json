{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"arduino_examples/","title":"Arduino Examples","text":"<p>Now that we have our library installed, we can get started playing around with our examples for each sensor. For the scope of this tutorial, we will combine the basic examples to output the values to a Serial Monitor. Then we will use the BME280's temperature and relative humidity. From there we will be able to build our own custom code to integrate the sensor into a project.</p>"},{"location":"arduino_examples/#example-1-ens160-and-bme280-combined-examples","title":"Example 1: ENS160 and BME280 Combined Examples","text":"<p>Below is the combined example to read ENS160 and BME280. Copy and paste the code below in your Arduino IDE.</p> Example 1: ENS160 and BME280 Combined Examples Ex1_Combined_Basic_Example_ENS160_BME280.ino <pre><code>/* Ex1_Combined_Basic_Example_ENS160_BME280.ino\nThis example shows basic data retrieval from the SparkFun Environmental Combo Breakout\nfrom the Air Quality Sensor (ENS160) and Atmospheric Sensor (BME280).\nThis example shows how to read sensor readings from the ENS160 (air quality index tVOC, and eCO2)\nand BME280 (humidity, pressure, and current temperature) over I2C.\nModified by:\nHo Yun \"Bobby\" Chan @ SparkFun Electronics August, 2023\nBasic Example for the ENS160 Originally Written by:\nElias Santistevan @ SparkFun Electronics October, 2022\nBasic Example for the ENS160 Originally Written by:\nNathan Seidle @ SparkFun Electronics March 9th, 2018\nProducts:\nAir Quality Sensor  (ENS160)             -  https://www.sparkfun.com/products/20844\nHumidity and Temperature Sensor (BME280) -  https://www.sparkfun.com/products/13676\nRepository:\nhttps://github.com/sparkfun/SparkFun_Indoor_Air_Quality_Sensor-ENS160_Arduino_Library\nSparkFun code, firmware, and software is released under the MIT\nLicense(http://opensource.org/licenses/MIT).\n*/\n#include &lt;Wire.h&gt;\n#include \"SparkFun_ENS160.h\"  // Click here to get the library: http://librarymanager/All#SparkFun_ENS160\n#include \"SparkFunBME280.h\"   // Click here to get the library: http://librarymanager/All#SparkFun_BME280\nSparkFun_ENS160 myENS;\nBME280 myBME280;\nint ensStatus;\nvoid setup() {\nWire.begin();\nSerial.begin(115200);\nif (!myENS.begin()) {\nSerial.println(\"Did not begin.\");\nwhile (1)\n;\n}\nif (myBME280.beginI2C() == false)  //Begin communication over I2C\n{\nSerial.println(\"The sensor did not respond. Please check wiring.\");\nwhile (1)\n;  //Freeze\n}\n// Reset the indoor air quality sensor's settings.\nif (myENS.setOperatingMode(SFE_ENS160_RESET))\nSerial.println(\"Ready.\");\ndelay(100);\n// Device needs to be set to idle to apply any settings.\n// myENS.setOperatingMode(SFE_ENS160_IDLE);\n// Set to standard operation\n// Others include SFE_ENS160_DEEP_SLEEP and SFE_ENS160_IDLE\nmyENS.setOperatingMode(SFE_ENS160_STANDARD);\n// There are four values here:\n// 0 - Operating ok: Standard Operation\n// 1 - Warm-up: occurs for 3 minutes after power-on.\n// 2 - Initial Start-up: Occurs for the first hour of operation.\n//                                              and only once in sensor's lifetime.\n// 3 - No Valid Output\nensStatus = myENS.getFlags();\nSerial.print(\"Gas Sensor Status Flag: \");\nSerial.println(ensStatus);\n}\nvoid loop() {\nif (myENS.checkDataStatus()) {\nSerial.print(\"Air Quality Index (1-5) : \");\nSerial.println(myENS.getAQI());\nSerial.print(\"Total Volatile Organic Compounds: \");\nSerial.print(myENS.getTVOC());\nSerial.println(\"ppb\");\nSerial.print(\"CO2 concentration: \");\nSerial.print(myENS.getECO2());\nSerial.println(\"ppm\");\nSerial.print(\"Humidity: \");\nSerial.print(myBME280.readFloatHumidity(), 0);\nSerial.println(\"RH%\");\nSerial.print(\"Pressure: \");\nSerial.print(myBME280.readFloatPressure(), 0);\nSerial.println(\"Pa\");\nSerial.print(\"Alt: \");\n//Serial.print(myBME280.readFloatAltitudeMeters(), 1);\n//Serial.println(\"meters\");\nSerial.print(myBME280.readFloatAltitudeFeet(), 1);\nSerial.println(\"feet\");\nSerial.print(\"Temp: \");\n//Serial.print(myBME280.readTempC(), 2);\n//Serial.println(\" degC\");\nSerial.print(myBME280.readTempF(), 2);\nSerial.println(\" degF\");\nSerial.println();\n}\ndelay(200);\n}\n</code></pre> <p>Select your board in the Tools menu (in our case Arduino Uno) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p>"},{"location":"arduino_examples/#example-2-combined-basic-example-ens160bme280-in-csv-format","title":"Example 2: Combined Basic Example ENS160/BME280 in CSV Format","text":"<p>Below is the same combined code but formatted for CSV. Copy and paste the code below in your Arduino IDE.</p> Example 2: Combined Basic Example ENS160/BME280 in CSV Format Ex2_Combined_Basic_Example_ENS160_BME280_CSV.ino <pre><code>/* Ex2_Combined_Basic_Example_ENS160_BME280_CSV.ino\n This example shows basic data retrieval from the SparkFun Environmental Combo Breakout\n from the Air Quality Sensor (ENS160) and Atmospheric Sensor (BME280). This example shows\n how to read sensor readings from the ENS160 (air quality index tVOC, and eCO2)\n and BME280 (humidity, pressure, and current temperature) over I2C. The output format is\n in CSV.\n Modified by:\n  Ho Yun \"Bobby\" Chan @ SparkFun Electronics August, 2023\n Basic Example for the ENS160 Originally Written by:\n    Elias Santistevan @ SparkFun Electronics October, 2022\n Basic Example for the ENS160 Originally Written by:\n  Nathan Seidle @ SparkFun Electronics March 9th, 2018\n Products:\n  Air Quality Sensor  (ENS160)             -  https://www.sparkfun.com/products/20844\n  Humidity and Temperature Sensor (BME280) -  https://www.sparkfun.com/products/13676\n Repository:\n    https://github.com/sparkfun/SparkFun_Indoor_Air_Quality_Sensor-ENS160_Arduino_Library\n SparkFun code, firmware, and software is released under the MIT\n License(http://opensource.org/licenses/MIT).\n*/\n#include &lt;Wire.h&gt;\n#include \"SparkFun_ENS160.h\"  // Click here to get the library: http://librarymanager/All#SparkFun_ENS160\n#include \"SparkFunBME280.h\"   // Click here to get the library: http://librarymanager/All#SparkFun_BME280\nSparkFun_ENS160 myENS;\nBME280 myBME280;\nint ensStatus;\nvoid setup() {\nWire.begin();\nSerial.begin(115200);\nif (!myENS.begin()) {\nSerial.println(\"Did not begin.\");\nwhile (1)\n;\n}\nif (myBME280.beginI2C() == false)  //Begin communication over I2C\n{\nSerial.println(\"The sensor did not respond. Please check wiring.\");\nwhile (1)\n;  //Freeze\n}\n// Reset the indoor air quality sensor's settings.\nif (myENS.setOperatingMode(SFE_ENS160_RESET))\n//Serial.println(\"Ready.\");\ndelay(100);\n// Device needs to be set to idle to apply any settings.\n// myENS.setOperatingMode(SFE_ENS160_IDLE);\n// Set to standard operation\n// Others include SFE_ENS160_DEEP_SLEEP and SFE_ENS160_IDLE\nmyENS.setOperatingMode(SFE_ENS160_STANDARD);\n// There are four values here:\n// 0 - Operating ok: Standard Operation\n// 1 - Warm-up: occurs for 3 minutes after power-on.\n// 2 - Initial Start-up: Occurs for the first hour of operation.\n//                                                and only once in sensor's lifetime.\n// 3 - No Valid Output\nensStatus = myENS.getFlags();\n//Serial.print(\"Gas Sensor Status Flag: \");\n//Serial.println(ensStatus);\nSerial.println(F(\"ENS160 Status Flag, Air Quality Index [1-5], tVOC [ppb], eCO2 [ppm], Relative Humidity [RH%], Pressure [Pa], Altitude [m], Altitude [ft], Temperature [degC], Temperature [degF]\"));\n}\nvoid loop() {\nif (myENS.checkDataStatus()) {\nensStatus = myENS.getFlags();\nSerial.print(ensStatus);\nSerial.print(F(\", \"));\nSerial.print(myENS.getAQI());\nSerial.print(F(\", \"));\nSerial.print(myENS.getTVOC());\nSerial.print(F(\", \"));\nSerial.print(myENS.getECO2());\nSerial.print(F(\", \"));\nSerial.print(myBME280.readFloatHumidity(), 0);\nSerial.print(F(\", \"));\nSerial.print(myBME280.readFloatPressure(), 0);\nSerial.print(F(\", \"));\nSerial.print(myBME280.readFloatAltitudeMeters(), 1);\nSerial.print(F(\", \"));\nSerial.print(myBME280.readFloatAltitudeFeet(), 1);\nSerial.print(F(\", \"));\nSerial.print(myBME280.readTempC(), 2);\nSerial.print(F(\", \"));\nSerial.print(myBME280.readTempF(), 2);\nSerial.println();\n}\ndelay(200);\n}\n</code></pre> <p>Select your board in the Tools menu (in our case Arduino Uno) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p>"},{"location":"arduino_examples/#example-3-bme280-temperature-and-relative-humidity-compensation","title":"Example 3: BME280 Temperature and Relative Humidity Compensation","text":"<p>Note</p> <p>This example is actually in the ENS160 Arduino Library! It is listed as example 4 even though in this tutorial we are referring to it as \"example 3.\"</p> <p>The example code below uses the BME280 for temperature and relative humidity compensation when reading values from the ENS160. Copy and paste the code below in your Arduino IDE.</p> Example 3: BME280 Temperature and Relative Humidity Compensation example4_BME280_temp_rh_compensation.ino <pre><code>/* example4_BME280_temp_rh_compensation.ino\n This example shows how to give the ENS160 Temperature and Relative Humidity\n Data for compensation with the BME280. Note that the values that are given for compensation are not\n populated in their registers until the Air Quality Sensor is set to \"Standard\" operation\n and when data is ready (i.e. the data ready bit is set). Also note that there will be some \n rounding of the temperature and relative humidity values when they're given to the sensor\n and again when they're read back. \n Please note that for compensation values the datasheet specifies that they can be written\n at any time. \n Modified by:\n  Ho Yun \"Bobby\" Chan @ SparkFun Electronics August, 2023\n Written by: \n    Elias Santistevan @ SparkFun Electronics October, 2022\n Products: \n  Air Quality Sensor  (ENS160)             -  https://www.sparkfun.com/products/20844\n  Humidity and Temperature Sensor (BME280) -  https://www.sparkfun.com/products/13676 \n Repository:\n    https://github.com/sparkfun/SparkFun_Indoor_Air_Quality_Sensor-ENS160_Arduino_Library\n SparkFun code, firmware, and software is released under the MIT\n License(http://opensource.org/licenses/MIT).\n*/\n#include &lt;Wire.h&gt;\n#include \"SparkFun_ENS160.h\"// Click here to get the library: http://librarymanager/All#SparkFun_ENS160\n#include \"SparkFunBME280.h\" // Click here to get the library: http://librarymanager/All#SparkFun_BME280\nSparkFun_ENS160 myENS;\nBME280 myBME280;\nbool printedCompensation = false;\nint ensStatus;\nfloat rh;\nfloat tempC;\nvoid setup() {\nWire.begin();\nSerial.begin(115200);\nif (!myENS.begin()) {\nSerial.println(\"Air Quality Sensor did not begin.\");\nwhile (1)\n;\n}\nif (myBME280.beginI2C() == false)  //Begin communication over I2C\n{\nSerial.println(\"The sensor did not respond. Please check wiring.\");\nwhile (1)\n;  //Freeze\n}\nrh = myBME280.readFloatHumidity();\ntempC = myBME280.readTempC();\nSerial.print(\"Relative Humidity (%): \");\nSerial.println(rh);\nSerial.print(\"Temperature (Celsius): \");\nSerial.println(tempC);\n// Reset the indoor air quality sensor's settings.\nif (myENS.setOperatingMode(SFE_ENS160_RESET))\nSerial.println(\"Ready.\");\ndelay(100);\n// Give values to Air Quality Sensor.\nmyENS.setTempCompensationCelsius(tempC);\nmyENS.setRHCompensationFloat(rh);\ndelay(500);\n// Set to standard operation\n// Others include SFE_ENS160_DEEP_SLEEP and SFE_ENS160_IDLE\nmyENS.setOperatingMode(SFE_ENS160_STANDARD);\n// There are four values here:\n// 0 - Operating ok: Standard Opepration\n// 1 - Warm-up: occurs for 3 minutes after power-on.\n// 2 - Initial Start-up: Occurs for the first hour of operation.\n//                                                and only once in sensor's lifetime.\n// 3 - No Valid Output\nensStatus = myENS.getFlags();\nSerial.print(\"Gas Sensor Status Flag: \");\nSerial.println(ensStatus);\n}\nvoid loop() {\nif (myENS.checkDataStatus()) {\nif (printedCompensation == false) {\nSerial.println(\"---------------------------\");\nSerial.print(\"Compensation Relative Humidity (%): \");\nSerial.println(myENS.getRH());\nSerial.println(\"---------------------------\");\nSerial.print(\"Compensation Temperature (Celsius): \");\nSerial.println(myENS.getTempCelsius());\nSerial.println(\"---------------------------\");\nprintedCompensation = true;\ndelay(500);\n}\nSerial.print(\"Air Quality Index (1-5) : \");\nSerial.println(myENS.getAQI());\nSerial.print(\"Total Volatile Organic Compounds: \");\nSerial.print(myENS.getTVOC());\nSerial.println(\"ppb\");\nSerial.print(\"CO2 concentration: \");\nSerial.print(myENS.getECO2());\nSerial.println(\"ppm\");\nSerial.println();\n}\ndelay(200);\n}\n</code></pre> <p>Select your board in the Tools menu (in our case Arduino Uno) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p>"},{"location":"arduino_examples/#more-examples","title":"More Examples!!!","text":"<p>Make sure to check the Arduino Libraries that you installed on your computer for more examples with the ENS160 and BME280! Remember, the SPI port is not broken out on the Environmental Combo Breakout - ENS160/BME280 so those examples will not apply for this specific board.</p> GitHub SparkFun &gt; SparkFun_Indoor_Air_Quality_Sensor-ENS160_Arduino_Library &gt; Examples GitHub SparkFun &gt; SparkFun_BME280_Arduino_Library &gt; Examples"},{"location":"arduino_library/","title":"Installing the Arduino Library","text":"<p>Arduino</p>"},{"location":"arduino_library/#arduino-ide","title":"Arduino IDE","text":"<p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE and an library, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul>"},{"location":"arduino_library/#usb-to-serial-drivers","title":"USB-to-Serial Drivers","text":"<p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p>"},{"location":"arduino_library/#ens160","title":"ENS160","text":"<p>SparkFun has written a library to work with the SparkFun Indoor Air Quality Sensor - ENS160 (Qwiic). This library can be used by extension with the Qwiic Environmental Combo Breakout - ENS160/BME280. You can obtain this library through the Arduino Library Manager by searching for \"ENS160\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the  GitHub Repositoryor download the .ZIP by clicking the button below:</p> SparkFun Indoor Air Quality Sensor - ENS160 Arduino Library (ZIP)"},{"location":"arduino_library/#bme280","title":"BME280","text":"<p>SparkFun has written a library to work with the SparkFun Qwiic Atmospheric Sensor - BME280 (Qwiic). This library can be used by extension with the Qwiic Environmental Combo Breakout - ENS160/BME280. You can obtain this library through the Arduino Library Manager by searching for \"BME280\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the  GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun BME280 Arduino Library (ZIP)"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_hookup/","title":"Hardware Hookup","text":""},{"location":"hardware_hookup/#connecting-via-qwiic","title":"Connecting via Qwiic","text":"<p>Connecting to the Qwiic Environmental Combo Breakout - ENS160/BME280 is simple. You will just need a microcontroller and a Qwiic cable. In this case, we used an ATmega328P as the microcontroller (we specifically tested the Arduino Libraries with the SparkFun RedBoard Qwiic). Insert one end of the Qwiic cable into the Qwiic Environmental Combo Breakout's Qwiic connector and the other end of the cable to your microcontroller's Qwiic connector. Then insert a USB cable into the RedBoard Qwiic to power and program.</p>"},{"location":"hardware_hookup/#connecting-via-pth-i2c-and-interrupt-pins","title":"Connecting via PTH I<sup>2</sup>C and Interrupt Pins","text":"<p>Note</p> <p>For temporary connections to the PTHs, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> <p> </p> <p>For users that are connecting to the PTH I<sup>2</sup>C and interrupt pins on the edge of the board, you will need to connect the RedBoard Qwiic and sensor like the table listed below. For users that are connecting to a different microcontroller, make sure to connect to its respective pins for the I<sup>2</sup>C and interrupt pins as they may be defined differently.</p> RedBoard Qwiic             (I/O set to 3.3V!)              Environmental Combo Breakout ENS160/BME280 (Qwiic)              3.3V 3.3V GND GND SCL (A5) SCL SDA (A4) SDA 2 INT <p>Note that you will also need to also make sure that the logic level is set to 3.3V. The default is set to 5V so you will need to cut the trace and add a solder blob between the center pad and the pad close to the 3.3V label.</p> <p>Note</p> <p>For users using the RedBoard Plus, there is a I/O switch available as opposed to an I/O jumper. You could flip the switch toward the 3.3V side to set the logic level as well.  </p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>The Environmental Combo Board breaks out the I<sup>2</sup>C port for the ENS160 and the BME280. The ScioSense's ENS160 is populated on the left side below the label ENS160. The independent hotplate control allows the detection of volatile organic compounds (VOCs) including ethanol, toluene, hydrogen and oxidizing gases with superior sensitivity. The ENS160 supports intelligent algorithms to process raw sensor measurements on-chip. These algorithms calculate CO<sup>2</sup>-equivalents, TVOC, air quality indices (AQIs) and perform humidity and temperature compensation, as well as baseline management, all on chip. Raw sensor measurements can be read for further customization. Bosch's BME280 is populated on the right side below the label BME280. The BME280 measures three different atmospheric properties: ambient temperature, relative humidity, and barometric pressure.</p> ENS160 Highlighted BME280 Highlighted <p>Let's look over a few characteristics of the Environmental Combo Breakout - ENS160/BME280 (Qwiic) sensor so we know a bit more about how it behaves. These characteristics were taken from the datasheet. For more information, make sure to check out the datasheet that is linked in the Resources section.</p> <ul> <li>ENS160<ul> <li>I<sup>2</sup>C Addresses: 0x53 (Default) or 0x52</li> <li>Wide Operating Ranges<ul> <li>VDD: 1.71 1.98V</li> <li>VDDIO: 1.71V to 3.6V</li> <li>Temperature: -40\u00b0C to +85\u00b0C</li> <li>Humidity: 5% to 95% (non-condensing)</li> </ul> </li> <li>IAQ standard compliance for AQI, eCO<sub>2</sub>, and TVOC<ul> <li>Air Quality Index - Umweltbundesamt (AQI-UBA)<ul> <li>Range: 1 to 5</li> <li>Resolution: 1</li> </ul> </li> <li>Equivalent Carbon Dioxide (eCO<sub>2</sub>)<ul> <li>Range: 400 to 65,000 ppm</li> <li>Resolution: 1 ppm</li> </ul> </li> <li>Total Volatile Organic Compound (TVOC)<ul> <li>Range: 0 to 65,000 ppb</li> <li>Resolution: 1 ppb</li> </ul> </li> </ul> </li> <li>Immunity to humidity and ozone<ul> <li>Superior output stability over the whole temperature and relative humidity operating ranges</li> <li>Effective ozone compensation</li> </ul> </li> <li>Independent sensor heater control for highest VOC selectivity and outstanding background discrimination</li> </ul> </li> <li>BME280<ul> <li>VDD: 1.71V to 3.6V</li> <li>VDDIO: 1.2V to 3.6V</li> <li>I<sup>2</sup>C Addresses: 0x77 (Default) or 0x76</li> <li>Temperature<ul> <li>Operating Range: -40\u00b0C to 85\u00b0C</li> <li>Full accuracy to \u00b1 0.5\u00b0C from -0\u00b0C to 65\u00b0C</li> <li>Resolution 0.01\u00b0C</li> </ul> </li> <li>Humidity<ul> <li>Operating Range: 0% to 100% RH</li> <li>Accurate to \u00b13% from 20% -80% RH</li> <li>Resolution: 0.008%RH</li> </ul> </li> <li>Pressure<ul> <li>Operating Range: 30,000 Pa to 110,000Pa</li> <li>Absolute Accuracy of \u00b1100Pa</li> <li>Relative Accuracy of \u00b112Pa</li> <li>Resolution: 0.18Pa</li> </ul> </li> <li>Altitude Range<ul> <li>0ft to 30,000ft (9.2km)</li> <li>Relative accuracy of 3.3ft (1m) at sea level, 6.6 (2m) at 30,000ft</li> </ul> </li> </ul> </li> </ul>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>To power the board, you will need 3.3V. You can power the board via either Qwiic connector. For users that need to solder directly to the board and do not have a Qwiic connector populated on the microcontroller, the pins are also broken out on the edge PTH. Voltage is regulated down to 1.8V for the ENS160 with the AP2127K voltage regulator. The logic levels of each sensor is 3.3V.</p>"},{"location":"hardware_overview/#i2c-and-qwiic-connectors","title":"I<sup>2</sup>C and Qwiic Connectors","text":"<p>The board includes two Qwiic connectors on each side of the board. For users that need to solder directly to the board, the pins are also broken out on the edge PTH. The I<sup>2</sup>C data and clock lines are also tied to 2.2k\u03a9 pull-up resistors.</p> <ul> <li>The default address of the ENS160 is set to 0x53. Its alternative address is 0x52. The default address of the BME280 is set to 0x77. Its alternative address is 0x76. For more information, check out the section about the jumpers.</li> </ul> <p>Note</p> <p>While both sensors are capable of SPI, we opted to only focus on using the sensors with I<sup>2</sup>C so only the I<sup>2</sup>C pins are broken out.</p>"},{"location":"hardware_overview/#interrupt-pin","title":"Interrupt Pin","text":"<p>The interrupt pin is also broken out for the ENS160 and it is active when the pin is low.</p>"},{"location":"hardware_overview/#led","title":"LED","text":"<p>There is one LED on the board. The LED lights up when the board is powered with 3.3V. There is a jumper on the back if you decide to disable the LED.</p>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>There are a few jumper pads available on the bottom of the board. For more information on modifying the jumpers, check out our tutorial on working with jumper pads and PCB traces.</p> <ul> <li>LED \u2014 The LED jumper is closed by default. Cut this trace to disable the power LED that is connected to 3.3V.</li> <li>I2C \u2014 The I<sup>2</sup>C jumpers are closed by default. By cutting the traces between the jumper pads, it will disconnect to the 2.2k\u03a9 pull-up resistors for the I<sup>2</sup>C bus. Most of the time you can leave these alone unless your project requires you to connect the pull-up resistors.</li> <li>BME ADR \u2014 This is the BME280 address select jumper. It is open by default so the address is <code>0x77</code>. By closing this jumper, the address changes to <code>0x76</code>. Make sure to also modify your code to adjust for the alternative address.</li> <li>ENS ADR \u2014 This is the ENS160 address select jumper. The center pad is connect to the right pad labeled as <code>0x53</code>. To use the sensor's alternative address, you will need to cut this jumper and adding a solder blob to between the center pad and the pad located on the left labeled <code>0x52</code>. If the center of the pad is left floating, the address will be undefined. Make sure to also modify your code to adjust for the alternative address.</li> </ul>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 1.0\" x 1.0\" (25.4mm x 25.4mm). There are 4x mounting holes by each corner of the board.</p>"},{"location":"introduction/","title":"Introduction","text":"<p>The SparkFun Qwiic Environmental Combo Breakout - ENS160/BME280 takes care of all your atmospheric-quality sensing needs with the popular ENS160 and BME280 ICs. This unique breakout provides a variety of environmental data, including AQI, TVOCs, equivalent CO<sub>2</sub> (or eCO<sub>2</sub>) levels, barometric pressure, humidity, and temperature.</p> <p> <ul> <li> <p> </p> <p> SparkFun Environmental Combo Breakout - ENS160/BME280 (Qwiic)    SEN-22858    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>In this tutorial, we'll go over the hardware and how to hookup the sensor to an Arduino. We will also go over the basic Arduino examples to get started!</p>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun RedBoard Qwiic [DEV-15123]</li> <li>1x USB micro-B Cable - 6 Foot [CAB-10215]</li> <li>1x SparkFun Environmental Combo Breakout - ENS160/BME280 (Qwiic) [SEN-22858]</li> <li>1x Qwiic Cable<ul> <li>Flexible Qwiic Cable - 50mm [PRT-17260], for short distances</li> <li>Flexible Qwiic Cable - 500mm [PRT-17257], for those that need to wire the board farther away from your microcontroller</li> </ul> </li> </ul> <ul> <li> <p> </p> <p> SparkFun RedBoard Qwiic    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> USB micro-B Cable - 6 Foot    CAB-15092 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Environmental Combo Breakout - ENS160/BME280 (Qwiic)    SEN-22858 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 50mm    PRT-17260 </p> </li> </ul>"},{"location":"introduction/#tools-optional","title":"Tools (Optional)","text":"<p>For those that need to solder to the PTHs, you will need to solder two wires between your microcontroller and the breakout board. This requires some assembly and soldering. You may already have a few of these items but if not, the tools and hardware below help with that assembly.</p> <ul> <li>Hook-Up Wire - Assortment (Stranded, 22 AWG) [PRT-11375]</li> <li>Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded) [TOL-22263]</li> <li>Soldering Iron [TOL-14456]</li> <li>Solder Lead Free - 15-gram Tube [TOL-9163]</li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded)    TOL-22263 </p> </li> </ul> <ul> <li> <p> </p> <p> Soldering Iron - 60W (Adjustable Temperature)    TOL-14456 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> RedBoard Qwiic Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Indoor Air Quality Sensor - ENS160 (Qwiic) Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Atmospheric Sensor (BME280) Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> Serial Terminal Basics </p> </li> </ul> <ul> <li> <p> </p> <p> Installing an Arduino Library </p> </li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>Now that you've successfully got your SparkFun Environmental Combo Breakout - ENS160/BME280 (Qwiic) up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Datasheet (PDF)<ul> <li>ENS160</li> <li>BME280</li> </ul> </li> <li>ENS160 White Paper (PDF)</li> <li>Arduino Libraries<ul> <li>ENS160</li> <li>BME280</li> </ul> </li> <li>GitHub Hardware Repo</li> </ul>"},{"location":"single_page/","title":"Introduction","text":"<p>The SparkFun Qwiic Environmental Combo Breakout - ENS160/BME280 takes care of all your atmospheric-quality sensing needs with the popular ENS160 and BME280 ICs. This unique breakout provides a variety of environmental data, including AQI, TVOCs, equivalent CO<sub>2</sub> (or eCO<sub>2</sub>) levels, barometric pressure, humidity, and temperature.</p> <p> <ul> <li> <p> </p> <p> SparkFun Environmental Combo Breakout - ENS160/BME280 (Qwiic)    SEN-22858    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>In this tutorial, we'll go over the hardware and how to hookup the sensor to an Arduino. We will also go over the basic Arduino examples to get started!</p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun RedBoard Qwiic [DEV-15123]</li> <li>1x USB micro-B Cable - 6 Foot [CAB-10215]</li> <li>1x SparkFun Environmental Combo Breakout - ENS160/BME280 (Qwiic) [SEN-22858]</li> <li>1x Qwiic Cable<ul> <li>Flexible Qwiic Cable - 50mm [PRT-17260], for short distances</li> <li>Flexible Qwiic Cable - 500mm [PRT-17257], for those that need to wire the board farther away from your microcontroller</li> </ul> </li> </ul> <ul> <li> <p> </p> <p> SparkFun RedBoard Qwiic    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> USB micro-B Cable - 6 Foot    CAB-15092 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Environmental Combo Breakout - ENS160/BME280 (Qwiic)    SEN-22858 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 50mm    PRT-17260 </p> </li> </ul>"},{"location":"single_page/#tools-optional","title":"Tools (Optional)","text":"<p>For those that need to solder to the PTHs, you will need to solder two wires between your microcontroller and the breakout board. This requires some assembly and soldering. You may already have a few of these items but if not, the tools and hardware below help with that assembly.</p> <ul> <li>Hook-Up Wire - Assortment (Stranded, 22 AWG) [PRT-11375]</li> <li>Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded) [TOL-22263]</li> <li>Soldering Iron [TOL-14456]</li> <li>Solder Lead Free - 15-gram Tube [TOL-9163]</li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded)    TOL-22263 </p> </li> </ul> <ul> <li> <p> </p> <p> Soldering Iron - 60W (Adjustable Temperature)    TOL-14456 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> RedBoard Qwiic Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Indoor Air Quality Sensor - ENS160 (Qwiic) Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Atmospheric Sensor (BME280) Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> Serial Terminal Basics </p> </li> </ul> <ul> <li> <p> </p> <p> Installing an Arduino Library </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>The Environmental Combo Board breaks out the I<sup>2</sup>C port for the ENS160 and the BME280. The ScioSense's ENS160 is populated on the left side below the label ENS160. The independent hotplate control allows the detection of volatile organic compounds (VOCs) including ethanol, toluene, hydrogen and oxidizing gases with superior sensitivity. The ENS160 supports intelligent algorithms to process raw sensor measurements on-chip. These algorithms calculate CO<sup>2</sup>-equivalents, TVOC, air quality indices (AQIs) and perform humidity and temperature compensation, as well as baseline management, all on chip. Raw sensor measurements can be read for further customization. Bosch's BME280 is populated on the right side below the label BME280. The BME280 measures three different atmospheric properties: ambient temperature, relative humidity, and barometric pressure.</p> ENS160 Highlighted BME280 Highlighted <p>Let's look over a few characteristics of the Environmental Combo Breakout - ENS160/BME280 (Qwiic) sensor so we know a bit more about how it behaves. These characteristics were taken from the datasheet. For more information, make sure to check out the datasheet that is linked in the Resources section.</p> <ul> <li>ENS160<ul> <li>I<sup>2</sup>C Addresses: 0x53 (Default) or 0x52</li> <li>Wide Operating Ranges<ul> <li>VDD: 1.71 1.98V</li> <li>VDDIO: 1.71V to 3.6V</li> <li>Temperature: -40\u00b0C to +85\u00b0C</li> <li>Humidity: 5% to 95% (non-condensing)</li> </ul> </li> <li>IAQ standard compliance for AQI, eCO<sub>2</sub>, and TVOC<ul> <li>Air Quality Index - Umweltbundesamt (AQI-UBA)<ul> <li>Range: 1 to 5</li> <li>Resolution: 1</li> </ul> </li> <li>Equivalent Carbon Dioxide (eCO<sub>2</sub>)<ul> <li>Range: 400 to 65,000 ppm</li> <li>Resolution: 1 ppm</li> </ul> </li> <li>Total Volatile Organic Compound (TVOC)<ul> <li>Range: 0 to 65,000 ppb</li> <li>Resolution: 1 ppb</li> </ul> </li> </ul> </li> <li>Immunity to humidity and ozone<ul> <li>Superior output stability over the whole temperature and relative humidity operating ranges</li> <li>Effective ozone compensation</li> </ul> </li> <li>Independent sensor heater control for highest VOC selectivity and outstanding background discrimination</li> </ul> </li> <li>BME280<ul> <li>VDD: 1.71V to 3.6V</li> <li>VDDIO: 1.2V to 3.6V</li> <li>I<sup>2</sup>C Addresses: 0x77 (Default) or 0x76</li> <li>Temperature<ul> <li>Operating Range: -40\u00b0C to 85\u00b0C</li> <li>Full accuracy to \u00b1 0.5\u00b0C from -0\u00b0C to 65\u00b0C</li> <li>Resolution 0.01\u00b0C</li> </ul> </li> <li>Humidity<ul> <li>Operating Range: 0% to 100% RH</li> <li>Accurate to \u00b13% from 20% -80% RH</li> <li>Resolution: 0.008%RH</li> </ul> </li> <li>Pressure<ul> <li>Operating Range: 30,000 Pa to 110,000Pa</li> <li>Absolute Accuracy of \u00b1100Pa</li> <li>Relative Accuracy of \u00b112Pa</li> <li>Resolution: 0.18Pa</li> </ul> </li> <li>Altitude Range<ul> <li>0ft to 30,000ft (9.2km)</li> <li>Relative accuracy of 3.3ft (1m) at sea level, 6.6 (2m) at 30,000ft</li> </ul> </li> </ul> </li> </ul>"},{"location":"single_page/#power","title":"Power","text":"<p>To power the board, you will need 3.3V. You can power the board via either Qwiic connector. For users that need to solder directly to the board and do not have a Qwiic connector populated on the microcontroller, the pins are also broken out on the edge PTH. Voltage is regulated down to 1.8V for the ENS160 with the AP2127K voltage regulator. The logic levels of each sensor is 3.3V.</p>"},{"location":"single_page/#i2c-and-qwiic-connectors","title":"I<sup>2</sup>C and Qwiic Connectors","text":"<p>The board includes two Qwiic connectors on each side of the board. For users that need to solder directly to the board, the pins are also broken out on the edge PTH. The I<sup>2</sup>C data and clock lines are also tied to 2.2k\u03a9 pull-up resistors.</p> <ul> <li>The default address of the ENS160 is set to 0x53. Its alternative address is 0x52. The default address of the BME280 is set to 0x77. Its alternative address is 0x76. For more information, check out the section about the jumpers.</li> </ul> <p>Note</p> <p>While both sensors are capable of SPI, we opted to only focus on using the sensors with I<sup>2</sup>C so only the I<sup>2</sup>C pins are broken out.</p>"},{"location":"single_page/#interrupt-pin","title":"Interrupt Pin","text":"<p>The interrupt pin is also broken out for the ENS160 and it is active when the pin is low.</p>"},{"location":"single_page/#led","title":"LED","text":"<p>There is one LED on the board. The LED lights up when the board is powered with 3.3V. There is a jumper on the back if you decide to disable the LED.</p>"},{"location":"single_page/#jumpers","title":"Jumpers","text":"<p>There are a few jumper pads available on the bottom of the board. For more information on modifying the jumpers, check out our tutorial on working with jumper pads and PCB traces.</p> <ul> <li>LED \u2014 The LED jumper is closed by default. Cut this trace to disable the power LED that is connected to 3.3V.</li> <li>I2C \u2014 The I<sup>2</sup>C jumpers are closed by default. By cutting the traces between the jumper pads, it will disconnect to the 2.2k\u03a9 pull-up resistors for the I<sup>2</sup>C bus. Most of the time you can leave these alone unless your project requires you to connect the pull-up resistors.</li> <li>BME ADR \u2014 This is the BME280 address select jumper. It is open by default so the address is <code>0x77</code>. By closing this jumper, the address changes to <code>0x76</code>. Make sure to also modify your code to adjust for the alternative address.</li> <li>ENS ADR \u2014 This is the ENS160 address select jumper. The center pad is connect to the right pad labeled as <code>0x53</code>. To use the sensor's alternative address, you will need to cut this jumper and adding a solder blob to between the center pad and the pad located on the left labeled <code>0x52</code>. If the center of the pad is left floating, the address will be undefined. Make sure to also modify your code to adjust for the alternative address.</li> </ul>"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 1.0\" x 1.0\" (25.4mm x 25.4mm). There are 4x mounting holes by each corner of the board.</p>"},{"location":"single_page/#hardware-hookup","title":"Hardware Hookup","text":""},{"location":"single_page/#connecting-via-qwiic","title":"Connecting via Qwiic","text":"<p>Connecting to the Qwiic Environmental Combo Breakout - ENS160/BME280 is simple. You will just need a microcontroller and a Qwiic cable. In this case, we used an ATmega328P as the microcontroller (we specifically tested the Arduino Libraries with the SparkFun RedBoard Qwiic). Insert one end of the Qwiic cable into the Qwiic Environmental Combo Breakout's Qwiic connector and the other end of the cable to your microcontroller's Qwiic connector. Then insert a USB cable into the RedBoard Qwiic to power and program.</p>"},{"location":"single_page/#connecting-via-pth-i2c-and-interrupt-pins","title":"Connecting via PTH I<sup>2</sup>C and Interrupt Pins","text":"<p>Note</p> <p>For temporary connections to the PTHs, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> <p> </p> <p>For users that are connecting to the PTH I<sup>2</sup>C and interrupt pins on the edge of the board, you will need to connect the RedBoard Qwiic and sensor like the table listed below. For users that are connecting to a different microcontroller, make sure to connect to its respective pins for the I<sup>2</sup>C and interrupt pins as they may be defined differently.</p> RedBoard Qwiic             (I/O set to 3.3V!)              Environmental Combo Breakout ENS160/BME280 (Qwiic)              3.3V 3.3V GND GND SCL (A5) SCL SDA (A4) SDA 2 INT <p>Note that you will also need to also make sure that the logic level is set to 3.3V. The default is set to 5V so you will need to cut the trace and add a solder blob between the center pad and the pad close to the 3.3V label.</p> <p>Note</p> <p>For users using the RedBoard Plus, there is a I/O switch available as opposed to an I/O jumper. You could flip the switch toward the 3.3V side to set the logic level as well.  </p>"},{"location":"single_page/#installing-the-arduino-library","title":"Installing the Arduino Library","text":"<p>Arduino</p>"},{"location":"single_page/#arduino-ide","title":"Arduino IDE","text":"<p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE and an library, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul>"},{"location":"single_page/#usb-to-serial-drivers","title":"USB-to-Serial Drivers","text":"<p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p>"},{"location":"single_page/#ens160","title":"ENS160","text":"<p>SparkFun has written a library to work with the SparkFun Indoor Air Quality Sensor - ENS160 (Qwiic). This library can be used by extension with the Qwiic Environmental Combo Breakout - ENS160/BME280. You can obtain this library through the Arduino Library Manager by searching for \"ENS160\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the  GitHub Repositoryor download the .ZIP by clicking the button below:</p> SparkFun Indoor Air Quality Sensor - ENS160 Arduino Library (ZIP)"},{"location":"single_page/#bme280","title":"BME280","text":"<p>SparkFun has written a library to work with the SparkFun Qwiic Atmospheric Sensor - BME280 (Qwiic). This library can be used by extension with the Qwiic Environmental Combo Breakout - ENS160/BME280. You can obtain this library through the Arduino Library Manager by searching for \"BME280\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the  GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun BME280 Arduino Library (ZIP)"},{"location":"single_page/#arduino-examples","title":"Arduino Examples","text":"<p>Now that we have our library installed, we can get started playing around with our examples for each sensor. For the scope of this tutorial, we will combine the basic examples to output the values to a Serial Monitor. Then we will use the BME280's temperature and relative humidity. From there we will be able to build our own custom code to integrate the sensor into a project.</p>"},{"location":"single_page/#example-1-ens160-and-bme280-combined-examples","title":"Example 1: ENS160 and BME280 Combined Examples","text":"<p>Below is the combined example to read ENS160 and BME280. Copy and paste the code below in your Arduino IDE.</p> Example 1: ENS160 and BME280 Combined Examples Ex1_Combined_Basic_Example_ENS160_BME280.ino <pre><code>/* Ex1_Combined_Basic_Example_ENS160_BME280.ino\nThis example shows basic data retrieval from the SparkFun Environmental Combo Breakout\nfrom the Air Quality Sensor (ENS160) and Atmospheric Sensor (BME280).\nThis example shows how to read sensor readings from the ENS160 (air quality index tVOC, and eCO2)\nand BME280 (humidity, pressure, and current temperature) over I2C.\nModified by:\nHo Yun \"Bobby\" Chan @ SparkFun Electronics August, 2023\nBasic Example for the ENS160 Originally Written by:\nElias Santistevan @ SparkFun Electronics October, 2022\nBasic Example for the ENS160 Originally Written by:\nNathan Seidle @ SparkFun Electronics March 9th, 2018\nProducts:\nAir Quality Sensor  (ENS160)             -  https://www.sparkfun.com/products/20844\nHumidity and Temperature Sensor (BME280) -  https://www.sparkfun.com/products/13676\nRepository:\nhttps://github.com/sparkfun/SparkFun_Indoor_Air_Quality_Sensor-ENS160_Arduino_Library\nSparkFun code, firmware, and software is released under the MIT\nLicense(http://opensource.org/licenses/MIT).\n*/\n#include &lt;Wire.h&gt;\n#include \"SparkFun_ENS160.h\"  // Click here to get the library: http://librarymanager/All#SparkFun_ENS160\n#include \"SparkFunBME280.h\"   // Click here to get the library: http://librarymanager/All#SparkFun_BME280\nSparkFun_ENS160 myENS;\nBME280 myBME280;\nint ensStatus;\nvoid setup() {\nWire.begin();\nSerial.begin(115200);\nif (!myENS.begin()) {\nSerial.println(\"Did not begin.\");\nwhile (1)\n;\n}\nif (myBME280.beginI2C() == false)  //Begin communication over I2C\n{\nSerial.println(\"The sensor did not respond. Please check wiring.\");\nwhile (1)\n;  //Freeze\n}\n// Reset the indoor air quality sensor's settings.\nif (myENS.setOperatingMode(SFE_ENS160_RESET))\nSerial.println(\"Ready.\");\ndelay(100);\n// Device needs to be set to idle to apply any settings.\n// myENS.setOperatingMode(SFE_ENS160_IDLE);\n// Set to standard operation\n// Others include SFE_ENS160_DEEP_SLEEP and SFE_ENS160_IDLE\nmyENS.setOperatingMode(SFE_ENS160_STANDARD);\n// There are four values here:\n// 0 - Operating ok: Standard Operation\n// 1 - Warm-up: occurs for 3 minutes after power-on.\n// 2 - Initial Start-up: Occurs for the first hour of operation.\n//                                              and only once in sensor's lifetime.\n// 3 - No Valid Output\nensStatus = myENS.getFlags();\nSerial.print(\"Gas Sensor Status Flag: \");\nSerial.println(ensStatus);\n}\nvoid loop() {\nif (myENS.checkDataStatus()) {\nSerial.print(\"Air Quality Index (1-5) : \");\nSerial.println(myENS.getAQI());\nSerial.print(\"Total Volatile Organic Compounds: \");\nSerial.print(myENS.getTVOC());\nSerial.println(\"ppb\");\nSerial.print(\"CO2 concentration: \");\nSerial.print(myENS.getECO2());\nSerial.println(\"ppm\");\nSerial.print(\"Humidity: \");\nSerial.print(myBME280.readFloatHumidity(), 0);\nSerial.println(\"RH%\");\nSerial.print(\"Pressure: \");\nSerial.print(myBME280.readFloatPressure(), 0);\nSerial.println(\"Pa\");\nSerial.print(\"Alt: \");\n//Serial.print(myBME280.readFloatAltitudeMeters(), 1);\n//Serial.println(\"meters\");\nSerial.print(myBME280.readFloatAltitudeFeet(), 1);\nSerial.println(\"feet\");\nSerial.print(\"Temp: \");\n//Serial.print(myBME280.readTempC(), 2);\n//Serial.println(\" degC\");\nSerial.print(myBME280.readTempF(), 2);\nSerial.println(\" degF\");\nSerial.println();\n}\ndelay(200);\n}\n</code></pre> <p>Select your board in the Tools menu (in our case Arduino Uno) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p>"},{"location":"single_page/#example-2-combined-basic-example-ens160bme280-in-csv-format","title":"Example 2: Combined Basic Example ENS160/BME280 in CSV Format","text":"<p>Below is the same combined code but formatted for CSV. Copy and paste the code below in your Arduino IDE.</p> Example 2: Combined Basic Example ENS160/BME280 in CSV Format Ex2_Combined_Basic_Example_ENS160_BME280_CSV.ino <pre><code>/* Ex2_Combined_Basic_Example_ENS160_BME280_CSV.ino\n This example shows basic data retrieval from the SparkFun Environmental Combo Breakout\n from the Air Quality Sensor (ENS160) and Atmospheric Sensor (BME280). This example shows\n how to read sensor readings from the ENS160 (air quality index tVOC, and eCO2)\n and BME280 (humidity, pressure, and current temperature) over I2C. The output format is\n in CSV.\n Modified by:\n  Ho Yun \"Bobby\" Chan @ SparkFun Electronics August, 2023\n Basic Example for the ENS160 Originally Written by:\n    Elias Santistevan @ SparkFun Electronics October, 2022\n Basic Example for the ENS160 Originally Written by:\n  Nathan Seidle @ SparkFun Electronics March 9th, 2018\n Products:\n  Air Quality Sensor  (ENS160)             -  https://www.sparkfun.com/products/20844\n  Humidity and Temperature Sensor (BME280) -  https://www.sparkfun.com/products/13676\n Repository:\n    https://github.com/sparkfun/SparkFun_Indoor_Air_Quality_Sensor-ENS160_Arduino_Library\n SparkFun code, firmware, and software is released under the MIT\n License(http://opensource.org/licenses/MIT).\n*/\n#include &lt;Wire.h&gt;\n#include \"SparkFun_ENS160.h\"  // Click here to get the library: http://librarymanager/All#SparkFun_ENS160\n#include \"SparkFunBME280.h\"   // Click here to get the library: http://librarymanager/All#SparkFun_BME280\nSparkFun_ENS160 myENS;\nBME280 myBME280;\nint ensStatus;\nvoid setup() {\nWire.begin();\nSerial.begin(115200);\nif (!myENS.begin()) {\nSerial.println(\"Did not begin.\");\nwhile (1)\n;\n}\nif (myBME280.beginI2C() == false)  //Begin communication over I2C\n{\nSerial.println(\"The sensor did not respond. Please check wiring.\");\nwhile (1)\n;  //Freeze\n}\n// Reset the indoor air quality sensor's settings.\nif (myENS.setOperatingMode(SFE_ENS160_RESET))\n//Serial.println(\"Ready.\");\ndelay(100);\n// Device needs to be set to idle to apply any settings.\n// myENS.setOperatingMode(SFE_ENS160_IDLE);\n// Set to standard operation\n// Others include SFE_ENS160_DEEP_SLEEP and SFE_ENS160_IDLE\nmyENS.setOperatingMode(SFE_ENS160_STANDARD);\n// There are four values here:\n// 0 - Operating ok: Standard Operation\n// 1 - Warm-up: occurs for 3 minutes after power-on.\n// 2 - Initial Start-up: Occurs for the first hour of operation.\n//                                                and only once in sensor's lifetime.\n// 3 - No Valid Output\nensStatus = myENS.getFlags();\n//Serial.print(\"Gas Sensor Status Flag: \");\n//Serial.println(ensStatus);\nSerial.println(F(\"ENS160 Status Flag, Air Quality Index [1-5], tVOC [ppb], eCO2 [ppm], Relative Humidity [RH%], Pressure [Pa], Altitude [m], Altitude [ft], Temperature [degC], Temperature [degF]\"));\n}\nvoid loop() {\nif (myENS.checkDataStatus()) {\nensStatus = myENS.getFlags();\nSerial.print(ensStatus);\nSerial.print(F(\", \"));\nSerial.print(myENS.getAQI());\nSerial.print(F(\", \"));\nSerial.print(myENS.getTVOC());\nSerial.print(F(\", \"));\nSerial.print(myENS.getECO2());\nSerial.print(F(\", \"));\nSerial.print(myBME280.readFloatHumidity(), 0);\nSerial.print(F(\", \"));\nSerial.print(myBME280.readFloatPressure(), 0);\nSerial.print(F(\", \"));\nSerial.print(myBME280.readFloatAltitudeMeters(), 1);\nSerial.print(F(\", \"));\nSerial.print(myBME280.readFloatAltitudeFeet(), 1);\nSerial.print(F(\", \"));\nSerial.print(myBME280.readTempC(), 2);\nSerial.print(F(\", \"));\nSerial.print(myBME280.readTempF(), 2);\nSerial.println();\n}\ndelay(200);\n}\n</code></pre> <p>Select your board in the Tools menu (in our case Arduino Uno) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p>"},{"location":"single_page/#example-3-bme280-temperature-and-relative-humidity-compensation","title":"Example 3: BME280 Temperature and Relative Humidity Compensation","text":"<p>Note</p> <p>This example is actually in the ENS160 Arduino Library! It is listed as example 4 even though in this tutorial we are referring to it as \"example 3.\"</p> <p>The example code below uses the BME280 for temperature and relative humidity compensation when reading values from the ENS160. Copy and paste the code below in your Arduino IDE.</p> Example 3: BME280 Temperature and Relative Humidity Compensation example4_BME280_temp_rh_compensation.ino <pre><code>/* example4_BME280_temp_rh_compensation.ino\n This example shows how to give the ENS160 Temperature and Relative Humidity\n Data for compensation with the BME280. Note that the values that are given for compensation are not\n populated in their registers until the Air Quality Sensor is set to \"Standard\" operation\n and when data is ready (i.e. the data ready bit is set). Also note that there will be some \n rounding of the temperature and relative humidity values when they're given to the sensor\n and again when they're read back. \n Please note that for compensation values the datasheet specifies that they can be written\n at any time. \n Modified by:\n  Ho Yun \"Bobby\" Chan @ SparkFun Electronics August, 2023\n Written by: \n    Elias Santistevan @ SparkFun Electronics October, 2022\n Products: \n  Air Quality Sensor  (ENS160)             -  https://www.sparkfun.com/products/20844\n  Humidity and Temperature Sensor (BME280) -  https://www.sparkfun.com/products/13676 \n Repository:\n    https://github.com/sparkfun/SparkFun_Indoor_Air_Quality_Sensor-ENS160_Arduino_Library\n SparkFun code, firmware, and software is released under the MIT\n License(http://opensource.org/licenses/MIT).\n*/\n#include &lt;Wire.h&gt;\n#include \"SparkFun_ENS160.h\"// Click here to get the library: http://librarymanager/All#SparkFun_ENS160\n#include \"SparkFunBME280.h\" // Click here to get the library: http://librarymanager/All#SparkFun_BME280\nSparkFun_ENS160 myENS;\nBME280 myBME280;\nbool printedCompensation = false;\nint ensStatus;\nfloat rh;\nfloat tempC;\nvoid setup() {\nWire.begin();\nSerial.begin(115200);\nif (!myENS.begin()) {\nSerial.println(\"Air Quality Sensor did not begin.\");\nwhile (1)\n;\n}\nif (myBME280.beginI2C() == false)  //Begin communication over I2C\n{\nSerial.println(\"The sensor did not respond. Please check wiring.\");\nwhile (1)\n;  //Freeze\n}\nrh = myBME280.readFloatHumidity();\ntempC = myBME280.readTempC();\nSerial.print(\"Relative Humidity (%): \");\nSerial.println(rh);\nSerial.print(\"Temperature (Celsius): \");\nSerial.println(tempC);\n// Reset the indoor air quality sensor's settings.\nif (myENS.setOperatingMode(SFE_ENS160_RESET))\nSerial.println(\"Ready.\");\ndelay(100);\n// Give values to Air Quality Sensor.\nmyENS.setTempCompensationCelsius(tempC);\nmyENS.setRHCompensationFloat(rh);\ndelay(500);\n// Set to standard operation\n// Others include SFE_ENS160_DEEP_SLEEP and SFE_ENS160_IDLE\nmyENS.setOperatingMode(SFE_ENS160_STANDARD);\n// There are four values here:\n// 0 - Operating ok: Standard Opepration\n// 1 - Warm-up: occurs for 3 minutes after power-on.\n// 2 - Initial Start-up: Occurs for the first hour of operation.\n//                                                and only once in sensor's lifetime.\n// 3 - No Valid Output\nensStatus = myENS.getFlags();\nSerial.print(\"Gas Sensor Status Flag: \");\nSerial.println(ensStatus);\n}\nvoid loop() {\nif (myENS.checkDataStatus()) {\nif (printedCompensation == false) {\nSerial.println(\"---------------------------\");\nSerial.print(\"Compensation Relative Humidity (%): \");\nSerial.println(myENS.getRH());\nSerial.println(\"---------------------------\");\nSerial.print(\"Compensation Temperature (Celsius): \");\nSerial.println(myENS.getTempCelsius());\nSerial.println(\"---------------------------\");\nprintedCompensation = true;\ndelay(500);\n}\nSerial.print(\"Air Quality Index (1-5) : \");\nSerial.println(myENS.getAQI());\nSerial.print(\"Total Volatile Organic Compounds: \");\nSerial.print(myENS.getTVOC());\nSerial.println(\"ppb\");\nSerial.print(\"CO2 concentration: \");\nSerial.print(myENS.getECO2());\nSerial.println(\"ppm\");\nSerial.println();\n}\ndelay(200);\n}\n</code></pre> <p>Select your board in the Tools menu (in our case Arduino Uno) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p>"},{"location":"single_page/#more-examples","title":"More Examples!!!","text":"<p>Make sure to check the Arduino Libraries that you installed on your computer for more examples with the ENS160 and BME280! Remember, the SPI port is not broken out on the Environmental Combo Breakout - ENS160/BME280 so those examples will not apply for this specific board.</p> GitHub SparkFun &gt; SparkFun_Indoor_Air_Quality_Sensor-ENS160_Arduino_Library &gt; Examples GitHub SparkFun &gt; SparkFun_BME280_Arduino_Library &gt; Examples"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":""},{"location":"single_page/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"single_page/#resources","title":"Resources","text":"<p>Now that you've successfully got your SparkFun Environmental Combo Breakout - ENS160/BME280 (Qwiic) up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Datasheet (PDF)<ul> <li>ENS160</li> <li>BME280</li> </ul> </li> <li>ENS160 White Paper (PDF)</li> <li>Arduino Libraries<ul> <li>ENS160</li> <li>BME280</li> </ul> </li> <li>GitHub Hardware Repo</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"github/contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Environmental Combo Breakout ENS160/BME280 (Qwiic) repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Environmental Combo Breakout ENS160/BME280 (Qwiic) repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Environmental Combo Breakout ENS160/BME280 (Qwiic) repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Environmental Combo Breakout ENS160/BME280 (Qwiic) repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"}]}